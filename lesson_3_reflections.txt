When would you want to use a remote repository rather than keeping all your work
local?

    It's essential to have a remote repository if you're working in a team or even alone on multiple computers - otherwise it would be hard to collaborate :)

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Someone might push not-working code to remote, until this is fixed you don't want automatic pulls.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks are good for working on projects where you don't want to alter the original project, but rather build up on it. Cloning projects is when you actively participate in that project and branches are useful for creating smaller deviations from your projects, like working on a special feature or experimental stuff which might be merged back to the main branch later.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    You can do diffs with other versions of the remote repository, you would have access to newer versions of that project

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    You could use other VCS tools, but the tight integration of Git in GitHub makes things a lot easier when it comes to collaboration. And…nobody wants to send around files by email anymore :)

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    I'd say everything besides very obvious typos or bugs should be worked on in a branch, rather than in master directly, as a branch has one common theme and it makes it easier to work on features in your own branch rather than polluting master with checkins there and potentially breaking stuff for others. Benefit of working in master direct is it makes things a bit easier because it's only there…
